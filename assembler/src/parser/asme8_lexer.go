// Code generated from AsmE8.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type AsmE8Lexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var AsmE8LexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func asme8lexerLexerInit() {
	staticData := &AsmE8LexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'\\t'", "'    '", "'  '", "'\\n'", "':'", "' '", "', '", "'mov'",
		"'add'", "'adc'", "'sub'", "'sbb'", "'cmp'", "'inc'", "'dec'", "'xor'",
		"'jmp'", "'jz'", "'jnz'", "'jsr'", "'rts'", "'brk'", "'nop'", "'push'",
		"'pop'", "'a'", "'b'", "'c'", "'d'", "'['", "']'", "'+'", "'='", "'.org '",
		"'.byte '", "'.word '",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "LINE_COMMENT", "SUFFIX_WHITESPACE", "WHITE_SPACE", "BINARY",
		"INT", "CHAR", "HEX", "STR",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24",
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32",
		"T__33", "T__34", "T__35", "LINE_COMMENT", "SUFFIX_WHITESPACE", "WHITE_SPACE",
		"BINARY", "INT", "CHAR", "HEX", "STR",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 44, 288, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1,
		6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1,
		9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12,
		1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1,
		15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17,
		1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1,
		20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23,
		1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1,
		26, 1, 26, 1, 27, 1, 27, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31,
		1, 31, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1,
		34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35,
		1, 35, 1, 35, 1, 36, 5, 36, 218, 8, 36, 10, 36, 12, 36, 221, 9, 36, 1,
		36, 1, 36, 5, 36, 225, 8, 36, 10, 36, 12, 36, 228, 9, 36, 1, 36, 1, 36,
		1, 37, 5, 37, 233, 8, 37, 10, 37, 12, 37, 236, 9, 37, 1, 37, 1, 37, 1,
		37, 1, 37, 1, 38, 4, 38, 243, 8, 38, 11, 38, 12, 38, 244, 1, 39, 1, 39,
		1, 39, 1, 39, 4, 39, 251, 8, 39, 11, 39, 12, 39, 252, 1, 40, 4, 40, 256,
		8, 40, 11, 40, 12, 40, 257, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1,
		41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 3, 41, 272, 8, 41, 1, 42, 1, 42,
		1, 42, 1, 42, 4, 42, 278, 8, 42, 11, 42, 12, 42, 279, 1, 43, 1, 43, 5,
		43, 284, 8, 43, 10, 43, 12, 43, 287, 9, 43, 0, 0, 44, 1, 1, 3, 2, 5, 3,
		7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13,
		27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22,
		45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30, 61, 31,
		63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77, 39, 79, 40,
		81, 41, 83, 42, 85, 43, 87, 44, 1, 0, 8, 2, 0, 10, 10, 13, 13, 1, 0, 32,
		32, 1, 0, 48, 49, 1, 0, 48, 57, 3, 0, 10, 10, 13, 13, 39, 39, 3, 0, 48,
		57, 65, 70, 97, 102, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90,
		95, 95, 97, 122, 298, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0,
		0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0,
		0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1,
		0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29,
		1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0,
		37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0,
		0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0,
		0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0,
		0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1,
		0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75,
		1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0,
		83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 1, 89, 1, 0, 0, 0,
		3, 91, 1, 0, 0, 0, 5, 96, 1, 0, 0, 0, 7, 99, 1, 0, 0, 0, 9, 101, 1, 0,
		0, 0, 11, 103, 1, 0, 0, 0, 13, 105, 1, 0, 0, 0, 15, 108, 1, 0, 0, 0, 17,
		112, 1, 0, 0, 0, 19, 116, 1, 0, 0, 0, 21, 120, 1, 0, 0, 0, 23, 124, 1,
		0, 0, 0, 25, 128, 1, 0, 0, 0, 27, 132, 1, 0, 0, 0, 29, 136, 1, 0, 0, 0,
		31, 140, 1, 0, 0, 0, 33, 144, 1, 0, 0, 0, 35, 148, 1, 0, 0, 0, 37, 151,
		1, 0, 0, 0, 39, 155, 1, 0, 0, 0, 41, 159, 1, 0, 0, 0, 43, 163, 1, 0, 0,
		0, 45, 167, 1, 0, 0, 0, 47, 171, 1, 0, 0, 0, 49, 176, 1, 0, 0, 0, 51, 180,
		1, 0, 0, 0, 53, 182, 1, 0, 0, 0, 55, 184, 1, 0, 0, 0, 57, 186, 1, 0, 0,
		0, 59, 188, 1, 0, 0, 0, 61, 190, 1, 0, 0, 0, 63, 192, 1, 0, 0, 0, 65, 194,
		1, 0, 0, 0, 67, 196, 1, 0, 0, 0, 69, 202, 1, 0, 0, 0, 71, 209, 1, 0, 0,
		0, 73, 219, 1, 0, 0, 0, 75, 234, 1, 0, 0, 0, 77, 242, 1, 0, 0, 0, 79, 246,
		1, 0, 0, 0, 81, 255, 1, 0, 0, 0, 83, 271, 1, 0, 0, 0, 85, 273, 1, 0, 0,
		0, 87, 281, 1, 0, 0, 0, 89, 90, 5, 9, 0, 0, 90, 2, 1, 0, 0, 0, 91, 92,
		5, 32, 0, 0, 92, 93, 5, 32, 0, 0, 93, 94, 5, 32, 0, 0, 94, 95, 5, 32, 0,
		0, 95, 4, 1, 0, 0, 0, 96, 97, 5, 32, 0, 0, 97, 98, 5, 32, 0, 0, 98, 6,
		1, 0, 0, 0, 99, 100, 5, 10, 0, 0, 100, 8, 1, 0, 0, 0, 101, 102, 5, 58,
		0, 0, 102, 10, 1, 0, 0, 0, 103, 104, 5, 32, 0, 0, 104, 12, 1, 0, 0, 0,
		105, 106, 5, 44, 0, 0, 106, 107, 5, 32, 0, 0, 107, 14, 1, 0, 0, 0, 108,
		109, 5, 109, 0, 0, 109, 110, 5, 111, 0, 0, 110, 111, 5, 118, 0, 0, 111,
		16, 1, 0, 0, 0, 112, 113, 5, 97, 0, 0, 113, 114, 5, 100, 0, 0, 114, 115,
		5, 100, 0, 0, 115, 18, 1, 0, 0, 0, 116, 117, 5, 97, 0, 0, 117, 118, 5,
		100, 0, 0, 118, 119, 5, 99, 0, 0, 119, 20, 1, 0, 0, 0, 120, 121, 5, 115,
		0, 0, 121, 122, 5, 117, 0, 0, 122, 123, 5, 98, 0, 0, 123, 22, 1, 0, 0,
		0, 124, 125, 5, 115, 0, 0, 125, 126, 5, 98, 0, 0, 126, 127, 5, 98, 0, 0,
		127, 24, 1, 0, 0, 0, 128, 129, 5, 99, 0, 0, 129, 130, 5, 109, 0, 0, 130,
		131, 5, 112, 0, 0, 131, 26, 1, 0, 0, 0, 132, 133, 5, 105, 0, 0, 133, 134,
		5, 110, 0, 0, 134, 135, 5, 99, 0, 0, 135, 28, 1, 0, 0, 0, 136, 137, 5,
		100, 0, 0, 137, 138, 5, 101, 0, 0, 138, 139, 5, 99, 0, 0, 139, 30, 1, 0,
		0, 0, 140, 141, 5, 120, 0, 0, 141, 142, 5, 111, 0, 0, 142, 143, 5, 114,
		0, 0, 143, 32, 1, 0, 0, 0, 144, 145, 5, 106, 0, 0, 145, 146, 5, 109, 0,
		0, 146, 147, 5, 112, 0, 0, 147, 34, 1, 0, 0, 0, 148, 149, 5, 106, 0, 0,
		149, 150, 5, 122, 0, 0, 150, 36, 1, 0, 0, 0, 151, 152, 5, 106, 0, 0, 152,
		153, 5, 110, 0, 0, 153, 154, 5, 122, 0, 0, 154, 38, 1, 0, 0, 0, 155, 156,
		5, 106, 0, 0, 156, 157, 5, 115, 0, 0, 157, 158, 5, 114, 0, 0, 158, 40,
		1, 0, 0, 0, 159, 160, 5, 114, 0, 0, 160, 161, 5, 116, 0, 0, 161, 162, 5,
		115, 0, 0, 162, 42, 1, 0, 0, 0, 163, 164, 5, 98, 0, 0, 164, 165, 5, 114,
		0, 0, 165, 166, 5, 107, 0, 0, 166, 44, 1, 0, 0, 0, 167, 168, 5, 110, 0,
		0, 168, 169, 5, 111, 0, 0, 169, 170, 5, 112, 0, 0, 170, 46, 1, 0, 0, 0,
		171, 172, 5, 112, 0, 0, 172, 173, 5, 117, 0, 0, 173, 174, 5, 115, 0, 0,
		174, 175, 5, 104, 0, 0, 175, 48, 1, 0, 0, 0, 176, 177, 5, 112, 0, 0, 177,
		178, 5, 111, 0, 0, 178, 179, 5, 112, 0, 0, 179, 50, 1, 0, 0, 0, 180, 181,
		5, 97, 0, 0, 181, 52, 1, 0, 0, 0, 182, 183, 5, 98, 0, 0, 183, 54, 1, 0,
		0, 0, 184, 185, 5, 99, 0, 0, 185, 56, 1, 0, 0, 0, 186, 187, 5, 100, 0,
		0, 187, 58, 1, 0, 0, 0, 188, 189, 5, 91, 0, 0, 189, 60, 1, 0, 0, 0, 190,
		191, 5, 93, 0, 0, 191, 62, 1, 0, 0, 0, 192, 193, 5, 43, 0, 0, 193, 64,
		1, 0, 0, 0, 194, 195, 5, 61, 0, 0, 195, 66, 1, 0, 0, 0, 196, 197, 5, 46,
		0, 0, 197, 198, 5, 111, 0, 0, 198, 199, 5, 114, 0, 0, 199, 200, 5, 103,
		0, 0, 200, 201, 5, 32, 0, 0, 201, 68, 1, 0, 0, 0, 202, 203, 5, 46, 0, 0,
		203, 204, 5, 98, 0, 0, 204, 205, 5, 121, 0, 0, 205, 206, 5, 116, 0, 0,
		206, 207, 5, 101, 0, 0, 207, 208, 5, 32, 0, 0, 208, 70, 1, 0, 0, 0, 209,
		210, 5, 46, 0, 0, 210, 211, 5, 119, 0, 0, 211, 212, 5, 111, 0, 0, 212,
		213, 5, 114, 0, 0, 213, 214, 5, 100, 0, 0, 214, 215, 5, 32, 0, 0, 215,
		72, 1, 0, 0, 0, 216, 218, 3, 77, 38, 0, 217, 216, 1, 0, 0, 0, 218, 221,
		1, 0, 0, 0, 219, 217, 1, 0, 0, 0, 219, 220, 1, 0, 0, 0, 220, 222, 1, 0,
		0, 0, 221, 219, 1, 0, 0, 0, 222, 226, 5, 59, 0, 0, 223, 225, 8, 0, 0, 0,
		224, 223, 1, 0, 0, 0, 225, 228, 1, 0, 0, 0, 226, 224, 1, 0, 0, 0, 226,
		227, 1, 0, 0, 0, 227, 229, 1, 0, 0, 0, 228, 226, 1, 0, 0, 0, 229, 230,
		6, 36, 0, 0, 230, 74, 1, 0, 0, 0, 231, 233, 7, 1, 0, 0, 232, 231, 1, 0,
		0, 0, 233, 236, 1, 0, 0, 0, 234, 232, 1, 0, 0, 0, 234, 235, 1, 0, 0, 0,
		235, 237, 1, 0, 0, 0, 236, 234, 1, 0, 0, 0, 237, 238, 7, 0, 0, 0, 238,
		239, 1, 0, 0, 0, 239, 240, 6, 37, 0, 0, 240, 76, 1, 0, 0, 0, 241, 243,
		7, 1, 0, 0, 242, 241, 1, 0, 0, 0, 243, 244, 1, 0, 0, 0, 244, 242, 1, 0,
		0, 0, 244, 245, 1, 0, 0, 0, 245, 78, 1, 0, 0, 0, 246, 247, 5, 48, 0, 0,
		247, 248, 5, 98, 0, 0, 248, 250, 1, 0, 0, 0, 249, 251, 7, 2, 0, 0, 250,
		249, 1, 0, 0, 0, 251, 252, 1, 0, 0, 0, 252, 250, 1, 0, 0, 0, 252, 253,
		1, 0, 0, 0, 253, 80, 1, 0, 0, 0, 254, 256, 7, 3, 0, 0, 255, 254, 1, 0,
		0, 0, 256, 257, 1, 0, 0, 0, 257, 255, 1, 0, 0, 0, 257, 258, 1, 0, 0, 0,
		258, 82, 1, 0, 0, 0, 259, 260, 5, 39, 0, 0, 260, 261, 5, 32, 0, 0, 261,
		272, 5, 39, 0, 0, 262, 263, 5, 34, 0, 0, 263, 264, 5, 39, 0, 0, 264, 272,
		5, 34, 0, 0, 265, 266, 5, 39, 0, 0, 266, 267, 5, 44, 0, 0, 267, 272, 5,
		39, 0, 0, 268, 269, 5, 39, 0, 0, 269, 270, 8, 4, 0, 0, 270, 272, 5, 39,
		0, 0, 271, 259, 1, 0, 0, 0, 271, 262, 1, 0, 0, 0, 271, 265, 1, 0, 0, 0,
		271, 268, 1, 0, 0, 0, 272, 84, 1, 0, 0, 0, 273, 274, 5, 48, 0, 0, 274,
		275, 5, 120, 0, 0, 275, 277, 1, 0, 0, 0, 276, 278, 7, 5, 0, 0, 277, 276,
		1, 0, 0, 0, 278, 279, 1, 0, 0, 0, 279, 277, 1, 0, 0, 0, 279, 280, 1, 0,
		0, 0, 280, 86, 1, 0, 0, 0, 281, 285, 7, 6, 0, 0, 282, 284, 7, 7, 0, 0,
		283, 282, 1, 0, 0, 0, 284, 287, 1, 0, 0, 0, 285, 283, 1, 0, 0, 0, 285,
		286, 1, 0, 0, 0, 286, 88, 1, 0, 0, 0, 287, 285, 1, 0, 0, 0, 10, 0, 219,
		226, 234, 244, 252, 257, 271, 279, 285, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// AsmE8LexerInit initializes any static state used to implement AsmE8Lexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewAsmE8Lexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func AsmE8LexerInit() {
	staticData := &AsmE8LexerLexerStaticData
	staticData.once.Do(asme8lexerLexerInit)
}

// NewAsmE8Lexer produces a new lexer instance for the optional input antlr.CharStream.
func NewAsmE8Lexer(input antlr.CharStream) *AsmE8Lexer {
	AsmE8LexerInit()
	l := new(AsmE8Lexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &AsmE8LexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "AsmE8.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// AsmE8Lexer tokens.
const (
	AsmE8LexerT__0              = 1
	AsmE8LexerT__1              = 2
	AsmE8LexerT__2              = 3
	AsmE8LexerT__3              = 4
	AsmE8LexerT__4              = 5
	AsmE8LexerT__5              = 6
	AsmE8LexerT__6              = 7
	AsmE8LexerT__7              = 8
	AsmE8LexerT__8              = 9
	AsmE8LexerT__9              = 10
	AsmE8LexerT__10             = 11
	AsmE8LexerT__11             = 12
	AsmE8LexerT__12             = 13
	AsmE8LexerT__13             = 14
	AsmE8LexerT__14             = 15
	AsmE8LexerT__15             = 16
	AsmE8LexerT__16             = 17
	AsmE8LexerT__17             = 18
	AsmE8LexerT__18             = 19
	AsmE8LexerT__19             = 20
	AsmE8LexerT__20             = 21
	AsmE8LexerT__21             = 22
	AsmE8LexerT__22             = 23
	AsmE8LexerT__23             = 24
	AsmE8LexerT__24             = 25
	AsmE8LexerT__25             = 26
	AsmE8LexerT__26             = 27
	AsmE8LexerT__27             = 28
	AsmE8LexerT__28             = 29
	AsmE8LexerT__29             = 30
	AsmE8LexerT__30             = 31
	AsmE8LexerT__31             = 32
	AsmE8LexerT__32             = 33
	AsmE8LexerT__33             = 34
	AsmE8LexerT__34             = 35
	AsmE8LexerT__35             = 36
	AsmE8LexerLINE_COMMENT      = 37
	AsmE8LexerSUFFIX_WHITESPACE = 38
	AsmE8LexerWHITE_SPACE       = 39
	AsmE8LexerBINARY            = 40
	AsmE8LexerINT               = 41
	AsmE8LexerCHAR              = 42
	AsmE8LexerHEX               = 43
	AsmE8LexerSTR               = 44
)
